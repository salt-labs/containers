---
#########################
# Name: skopeo
# Description: An example testing and tagging with skopeo
# Notes:
#   * Tests and tags container with common tags.
# Usage:
#   * Copy and paste the below into .gitlab-ci.yml
#   * Choose the example that best suits your usecase and update vars.
#   * Include the changes through the MR process.
#########################

stages:
  - build
  - test
  - release

include:
  - remote: "https://git.saltlabs.cloud/templates/gitlab-ci/-/raw/main/Jobs/buildah.gitlab-ci.yml"
  - remote: "https://git.saltlabs.cloud/templates/gitlab-ci/-/raw/main/Jobs/skopeo.gitlab-ci.yml"
  - remote: "https://git.saltlabs.cloud/templates/gitlab-ci/-/raw/main/Workflows/release_semver.gitlab-ci.yml"

buildah-build:
  stage: build
  extends:
    - ".buildah-linux-amd64"
  variables:
    OCI_PLATFORM_AMD64: "TRUE"
    OCI_NAME: "${CI_PROJECT_NAME}"
    OCI_CONTEXT: "containers"
    OCI_DOCKERFILE: "Dockerfile"
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${CI_COMMIT_SHA}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "Dockerfile"
        - "**/Dockerfile"
        - "containers/**"
      when: on_success
    - when: never

buildah-release:
  stage: release
  extends:
    - ".buildah-linux-amd64"
  needs:
    - job: "semver-get"
      optional: false
      artifacts: true
    - job: "semver-tag"
      optional: false
      artifacts: false
  variables:
    OCI_PLATFORM_AMD64: "TRUE"
    OCI_NAME: "${CI_PROJECT_NAME}"
    OCI_CONTEXT: "containers"
    OCI_DOCKERFILE: "Dockerfile"
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${NEXT_VERSION}"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: on_success
    - when: never

# Ensures the expected container image is present with the required tags.
skopeo-inspect:
  stage: test
  extends:
    - ".skopeo-inspect"
  needs:
    - job: "buildah-build"
      optional: false
      artifacts: false
  variables:
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${NEXT_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "Dockerfile"
        - "**/Dockerfile"
        - "containers/**"
      when: on_success
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: on_success
    - when: never

# Example to set the latest tag on every MR change to a Dockerfile.
skopeo-tag-latest:
  stage: release
  extends:
    - ".skopeo-tag"
  needs:
    - job: "skopeo-inspect"
      optional: true
      artifacts: false
    - job: "container_scanning"
      optional: true
      artifacts: false
  variables:
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${CI_COMMIT_SHA}"
    NEW_TAG: "latest"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "Dockerfile"
        - "**/Dockerfile"
        - "containers/**"
      when: on_success
    - when: never

# Example where a tag is applied if the git commit tag is present.
skopeo-tag-on-tags:
  stage: release
  extends:
    - ".skopeo-tag"
  needs:
    - job: "skopeo-inspect"
      optional: true
      artifacts: false
    - job: "container_scanning"
      optional: true
      artifacts: false
  variables:
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${CI_COMMIT_SHA}"
    NEW_TAG: "${CI_COMMIT_TAG}"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG != null"
      when: on_success
    - when: never

# Example where a tag is applied based on the branch.
skopeo-tag-on-branch:
  stage: release
  extends:
    - ".skopeo-tag"
  needs:
    - job: "skopeo-inspect"
      optional: true
      artifacts: false
    - job: "container_scanning"
      optional: true
      artifacts: false
  variables:
    OCI_IMAGE: "${CI_REGISTRY_IMAGE}"
    OCI_TAG: "${CI_COMMIT_SHA}"
    NEW_TAG: "development"
  rules:
    - if: '$CI_COMMIT_BRANCH == "environments/development"'
      when: on_success
    - when: never
