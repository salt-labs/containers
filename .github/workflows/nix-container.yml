---
name: Nix container

on:
  push:
    branches:
      - $default-branch
      - trunk
    paths:
      - .github/workflows/nix-container.yml
      - flake.nix
      - flake.lock
      - oci/*
      - devshells/*
      - scripts/*

  pull_request:
    branches:
      - $default-branch
      - "trunk"
    paths:
      - .github/workflows/nix-container.yml
      - flake.nix
      - flake.lock
      - oci/*
      - devshells/*
      - scripts/*

permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: read

env:
  NIXPKGS_ALLOW_UNFREE: 1

  PROJECT: ${{ github.repository }}

  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  CONTAINER_BUILD: "true"
  CONTAINER_PUBLISH: "true"

defaults:
  run:
    shell: bash

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - id: check_success
        name: Nix Flake check was successful
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          echo Nix Flake check was successful, continuing container builds.
          exit 0

      - id: check_failure
        name: Nix Flake check has failed
        if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        run: |
          echo Nix Flake check failed, cancelling container builds.
          exit 1

  matrix:
    name: Matrix

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30
    continue-on-error: false

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v3

      - id: generate_matrix
        name: Generating a matrix of container names
        run: |
          echo "Generating matrix of container names..."
          CONTAINER_NAMES=$(find oci -mindepth 1 -type d ! -name "_template" ! -name "_disabled*" -printf "%f\n" | jq -R -s -c 'split("\n")[:-1]')
          echo "${CONTAINER_NAMES}" | jq .
          echo "CONTAINER_MATRIX=${CONTAINER_NAMES}" >> "$GITHUB_OUTPUT"

    outputs:
      container_matrix: ${{ steps.generate_matrix.outputs.CONTAINER_MATRIX }}

  nix:
    name: ${{ matrix.container }}-${{ matrix.nix_system }}

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30
    continue-on-error: false

    needs: matrix

    strategy:
      fail-fast: false
      matrix:
        #container: ${{ fromJson(needs.matrix.outputs.container_matrix) }}
        container:
          - "brakeman"
        os:
          - ubuntu-latest
        nix_system:
          #- "aarch64-darwin"
          #- "aarch64-linux"
          #- "x86_64-darwin"
          - "x86_64-linux"
        #exclude:
        # Exclude unsupported combinations.
        #- container: "codeql"
        #  nix_system: "aarch64-darwin"
        #- container: "codeql"
        #  nix_system: "aarch64-linux"

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: false
          submodules: recursive

      - id: install_nix
        name: "Install Nix ❄️"
        uses: cachix/install-nix-action@v20

      - id: cachix
        name: "Enable Cachix ❄️"
        uses: cachix/cachix-action@v12
        with:
          name: salt-labs
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - id: check_flake
        name: Nix Flake check
        run: >-
          nix flake check
          --no-build
          --refresh
          --keep-going
          --verbose
          --impure

      - id: calver
        name: Set Calver Version
        uses: Nelyx/action-calver@v1.0.0
        with:
          default_branch: "refs/heads/trunk"
          format: "YYYY.MM.DD"
          version_prefix: ""

      - id: debug
        name: Display debug info
        run: |
          echo "##################################################"
          echo "Running on ${{ matrix.os }}"
          echo "REGISTRY_PATH: $REGISTRY_PATH"
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "SYSTEM: $SYSTEM"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "CONTAINER_BUILD: $CONTAINER_BUILD"
          echo "CONTAINER_PUBLISH: $CONTAINER_PUBLISH"
          echo "##################################################"
        env:
          REGISTRY_PATH: "${{ env.REGISTRY }}/${{ env.PROJECT }}"
          IMAGE_NAME: ${{ matrix.container }}
          SYSTEM: ${{ matrix.nix_system }}
          IMAGE_TAG: "${{ steps.calver.outputs.package_version }}"

      - id: publish_container_latest
        name: Publish container image ${{ matrix.container }}
        if: ${{ github.event_name == 'pull_request' }}
        run: ./scripts/oci.sh
        env:
          REGISTRY_PATH: "${{ env.REGISTRY }}/${{ env.PROJECT }}"
          IMAGE_NAME: ${{ matrix.container }}
          SYSTEM: ${{ matrix.nix_system }}
          IMAGE_TAG: "latest"

      - id: publish_container_release
        name: Publish container image ${{ matrix.container }}
        if: ${{ github.event_name == 'push'  && github.ref == 'refs/heads/trunk' }}
        run: ./scripts/oci.sh
        env:
          REGISTRY_PATH: "${{ env.REGISTRY }}/${{ env.PROJECT }}"
          IMAGE_NAME: ${{ matrix.container }}
          SYSTEM: ${{ matrix.nix_system }}
          IMAGE_TAG: "${{ steps.calver.outputs.package_version }}"
