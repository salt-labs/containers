---
##################################################
# Name: ansible_collection
# Description: Manage Ansible Collections.
# Notes:
#     * This assumes the folder layout from the ansible template project.
#     * Dependencies assume the use of ansible.cfg to define the required dirs.
##################################################

.ansible-galaxy:
  needs: []
  dependencies: null
  image:
    name: registry.saltlabs.cloud/utils/ansible/vmware:release
  variables:
    REQUIREMENTS_COLLECTIONS: "collections/requirements.yml"
    REQUIREMENTS_ROLES: "roles/requirements.yml"
  before_script:
    # TODO: This option is being deprecated and needs to be removed when users have migrated to 'ansible/'
    # When the root contains the collection.
    - |
      if [[ -f "galaxy.yml" ]];
      then
        # If the current dir is the collection.
        export ANSIBLE_ROOT="$(readlink -f .)"
      elif [[ -f "ansible/galaxy.yml" ]];
      then
        # If the collection is nested inside the 'ansible' folder.
        export ANSIBLE_ROOT="$(readlink -f .)/ansible"
      fi
      export ANSIBLE_COLLECTIONS_PATH="${ANSIBLE_ROOT}/collections"
      export ANSIBLE_ROLES_PATH="${ANSIBLE_ROOT}/roles"
    - ansible --version
    - ansible-galaxy --version
  script:
    # Metadata
    - |
      echo "Capturing Galaxy metadata from ${ANSIBLE_ROOT}/galaxy.yml"
      NAMESPACE=$( grep -E "^namespace:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
      NAME=$( grep -E "^name:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
      VERSION=$( grep -E "^version:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
    # Start from the Ansible root
    - pushd "${ANSIBLE_ROOT}"
    # Ensure the dir is not world-writeable or Ansible will ignore the config.
    - sudo chmod o-w .
    # Collections
    # TODO: Handle --token flag when we have Ansible Automation Hub
    - |
      if [[ -f "${REQUIREMENTS_COLLECTIONS}" ]];
      then
        echo "Downloading collection dependencies for Ansible Collection versioned artefact for ${NAMESPACE:-NAMESPACE_EMPTY}.${NAME:-NAME_EMPTY} ${VERSION:-VERSION_EMPTY}"
        ansible-galaxy collection install --verbose --ignore-certs --force-with-deps --requirements-file "${REQUIREMENTS_COLLECTIONS}" || {
          echo "Failed to download Ansible Collections defined in ${REQUIREMENTS_COLLECTIONS}"
          exit 1
        }
      fi
    # Roles
    # TODO: Handle --token flag when we have Ansible Automation Hub
    - |
      if [[ -f "${REQUIREMENTS_ROLES}" ]];
      then
        echo "Downloading role dependencies for Ansible Collection versioned artefact for ${NAMESPACE:-NAMESPACE_EMPTY}.${NAME:-NAME_EMPTY} ${VERSION:-VERSION_EMPTY}"
        ansible-galaxy role install --verbose --ignore-certs --force-with-deps --role-file "${REQUIREMENTS_ROLES}" || {
          echo "Failed to download Ansible Collections defined in ${REQUIREMENTS_ROLES}"
          exit 1
        }
      fi
    - popd
    # Debug info
    - |
      if [[ "${DEBUG:-FALSE}" == "TRUE" ]];
      then
        tree -a
      fi
  artifacts:
    name: "ansible-galaxy"
    public: false
    untracked: true
    when: always
    paths:
      - "ansible/"
      - "output/"
  allow_failure: false

.ansible-collection:
  needs: []
  dependencies: null
  image:
    name: registry.saltlabs.cloud/utils/ansible/vmware:release
  variables:
    BUMP_GALAXY_VERSION: "False"
    OUTPUT_PATH: "output"
  before_script:
    - |
      if [[ ! -d "${OUTPUT_PATH}" ]];
      then
        echo "Creating Archive directory ${OUTPUT_PATH}"
        mkdir --parents "${OUTPUT_PATH}"
      fi
    # TODO: This option is being deprecated and needs to be removed when users have migrated to 'ansible/'
    # When the root contains the collection.
    - |
      if [[ -f "galaxy.yml" ]];
      then
        # If the current dir is the collection.
        export ANSIBLE_ROOT="."
      elif [[ -f "ansible/galaxy.yml" ]];
      then
        # If the collection is nested inside the 'ansible' folder.
        export ANSIBLE_ROOT="./ansible"
      else
        echo "Unable to find Ansible galaxy.yml in defined locations. Are you using the correct project template?"
        exit 1
      fi
      export ANSIBLE_COLLECTIONS_PATH="${ANSIBLE_ROOT}/collections"
      export ANSIBLE_ROLES_PATH="${ANSIBLE_ROOT}/roles"
    - |
      if [[ "${BUMP_GALAXY_VERSION^^}" == "TRUE" ]];
      then
        VERSION="${NEXT_VERSION//v}"
        sudo sed -i "s/version: 0.0.0/version: ${VERSION}/g" "${ANSIBLE_ROOT}/galaxy.yml"
      fi
    - ansible --version
    - ansible-galaxy --version
    - ansible --version
    - ansible-galaxy --version
  script:
    # Metadata
    - |
      echo "Capturing Galaxy metadata from ${ANSIBLE_ROOT}/galaxy.yml"
      NAMESPACE=$( grep -E "^namespace:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
      NAME=$( grep -E "^name:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
      VERSION=$( grep -E "^version:" "${ANSIBLE_ROOT}/galaxy.yml" | awk '{$1=""; gsub(/^[ \t]+| [ \t]+$/,""); print $0}' || true )
    - echo "Creating Ansible Collection versioned artefact for ${NAMESPACE:-NAMESPACE_EMPTY}.${NAME:-NAME_EMPTY} ${VERSION:-VERSION_EMPTY}"
    # Build the Collection from the current dir.
    - >
      ansible-galaxy
      collection
      build
      --verbose
      --force
      --output-path
      "${OUTPUT_PATH}"
      "${ANSIBLE_ROOT}"
    - |
      set -eu
      echo "Creating Ansible Collection latest artefact for ${NAMESPACE:-NAMESPACE_EMPTY}.${NAME:-NAME_EMPTY} ${VERSION:-VERSION_EMPTY}"
      cp "${OUTPUT_PATH}/${NAMESPACE}-${NAME}-${VERSION}.tar.gz" "${OUTPUT_PATH}/${NAMESPACE}-${NAME}-latest.tar.gz"
    # Debug info
    - |
      if [[ "${DEBUG:-FALSE}" == "TRUE" ]];
      then
        tree -a
      fi
  artifacts:
    name: "ansible"
    public: false
    untracked: true
    when: always
    paths:
      - "ansible/"
      - "output/"
  allow_failure: false
