---
##################################################
# Name: tag
# Description: Applies a git tag to the branch.
# Notes:
#   * This Job is configured to run on merges into the mainline branch.
#
#   * A CI variable GIT_BOT_TOKEN is required to be set with a token that
#     has permissions to read from and write to the repository.
##################################################

# Create git tag with the semantic release version.
.tag:
  needs: []
  dependencies: null
  image:
    name: artefacts.saltlabs.cloud/docker/debian:bullseye-slim
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    GIT_SSL_NO_VERIFY: "true"
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
    SSLCERT_PATH: "/usr/local/share/ca-certificates"
    GIT_BOT_NAME: "Git Bot"
    GIT_BOT_EMAIL: "git-bot@saltlabs.cloud"
    GIT_BOT_USERNAME: "git-bot"
    GIT_BOT_TOKEN: "${GIT_BOT_TOKEN}"
  before_script:
    - apt update
    - apt install --yes apt-utils curl git ca-certificates
    - mkdir --parents ${SSLCERT_PATH}
    - echo "${ADDITIONAL_CA_CERT_BUNDLE}" >> ${SSLCERT_PATH}/additional-ca-cert-bundle.crt
    - echo "${CI_SERVER_TLS_CA_FILE}" >> ${SSLCERT_PATH}/additional-ca-cert-bundle.crt
    - update-ca-certificates
  script:
    - |
      [[ "${NEXT_VERSION:-EMPTY}" == "EMPTY" ]] && (echo "NEXT_VERSION must be set" >&2; exit 1)
      # kics-scan ignore-line
      [[ "${GIT_BOT_TOKEN:-EMPTY}" == "EMPTY" ]] && (echo "GIT_BOT_TOKEN must be set" >&2; exit 1)
    - git config --global user.name "${GIT_BOT_NAME}"
    - git config --global user.email "${GIT_BOT_EMAIL}"
    - git checkout ${CI_COMMIT_REF_NAME}
    - git fetch --tags
    - git tag --list -n1
    - |
      if [[ -f "CHANGELOG.md" ]];
      then
        git add CHANGELOG.md || true
      fi
      echo "Checking for staged changes"
      git status -s
      LINES=$(git status -s | grep --count -v "??") || true
      echo "Changed lines: ${LINES:-0}"
      if [[ ${LINES:-0} -gt 0 ]];
      then
        echo "Updating changelog"
        git commit --message "docs: Updated changelog"
        git push --push-option ci.skip \
        "https://${GIT_BOT_USERNAME}:${GIT_BOT_TOKEN}@${CI_REPOSITORY_URL#*@}"
      else
        echo "No changes found, skipping changelog update."
      fi
    - |
      if [[ $(git tag --list "${NEXT_VERSION}") ]];
      then
        echo "Version ${NEXT_VERSION} already exists, skipping..."
        echo "TAG_ADDED=FALSE" >> variables.env
      else
        # A safety check in the event a user is testing this from a topic branch and has overridden the rules,
        # ensuring that tags are only ever created on the mainline branch.
        if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]];
        then
          echo "Adding git tag ${NEXT_VERSION}"
          echo "TAG_ADDED=TRUE" >> variables.env
          git tag --annotate ${NEXT_VERSION} --message "Release ${NEXT_VERSION}"
          git push --push-option ci.skip --tags \
          "https://${GIT_BOT_USERNAME}:${GIT_BOT_TOKEN}@${CI_REPOSITORY_URL#*@}"
        else
          echo "Skipping push of tag for branch ${CI_COMMIT_BRANCH}"
        fi
      fi
  artifacts:
    reports:
      dotenv: variables.env
  rules:
    # Never run on schedules
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    # Never run on manual
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "api"'
      when: never
    # Always run on commits to mainline.
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: on_success
    # Don't run for anything else.
    - when: never
  allow_failure: false
